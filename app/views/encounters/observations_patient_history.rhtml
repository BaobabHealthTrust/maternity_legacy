<script>
  var tt_cancel_destination = "/encounters/new/<%= (params[:ret] ? params[:ret] : "observations") %>/?patient_id=<%=  @patient.id %>"
  var timedEvent;

  function setDate(elementId){

    if ($(elementId).value.toLowerCase() == 'unknown'){
      $(elementId+'_value_datetime').value = null;
      $(elementId+'_value_modifier').value = null;
    }
    else{
      $(elementId+'_value_datetime').value = new Date($(elementId).value);  //.replace(/-/g, '/'));
    }
  }

  function checkHIVTestDate(){
    var hiv_test_date_str = $("hiv_test_date").value.replace(/-/g, '/');
    var hiv_test_date     = new Date(hiv_test_date_str);
    var today             = new Date(Date.now());

    var weeks_ago = parseInt((today.getTime()- hiv_test_date.getTime())/ (1000 * 60 * 60 * 24 * 7));
   
    if (weeks_ago > 12){
      dispatchMessage("Patient needs to be tested again", tstMessageBoxType.OKOnly);
      return "true";
    }
    return "false";
  }

  // Every 500 milliseconds update the Next/Finish button
  function updateNextFinish(){
    if (tstInputTarget.value == '')
      $('nextButton').innerHTML = '<span>Finish</span>';
    else
      $('nextButton').innerHTML = '<span>Next</span>';
    setTimeout(updateNextFinish, 500)
  }

  function calculateEDOD(){
    var edod = "";
    var gestation = "";
    var month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    
    if(!$('expected_date_of_delivery')){
      var div = document.createElement("div");
      div.id = "expected_date_of_delivery";
      div.className = "statusLabel";

      $("inputFrame" + tstCurrentPage).appendChild(div);
    }

    if($("touchscreenInput" + tstCurrentPage).value.trim().length > 0 && 
      $("touchscreenInput" + tstCurrentPage).value.trim() != "Unknown"){

      var theDate = new Date($("touchscreenInput" + tstCurrentPage).value.trim());

      theDate.setDate(theDate.getDate() + 7);

      var today = new Date();

      var s = today - theDate;

      gestation = String(Math.floor(s / (24 * 60 * 60 * 7 * 1000)));

      theDate.setMonth(theDate.getMonth() + 9);

      edod = (theDate.getDate() + "-" + month[theDate.getMonth()] + "-" + theDate.getFullYear());
      
    }

    $("expected_date_of_delivery").innerHTML = "Expected Date Of Delivery: <i style='font-size: 1.2em; float: right;'>" + 
      edod + "</i><br /><br />Gestation Weeks: " + (gestation < 32 &&
      gestation.trim().length > 0 ? "<i style='color: red'>(Premature)</i>" : "") +
      "<i style='font-size: 1.2em; float: right; width: 100px;'>" + gestation + "</i>";
    
    timedEvent = setTimeout('calculateEDOD()', 500);
  }

  function calculateBP(pos){
    var bp;
    
    if(!$('bp')){
      var div = document.createElement("div");
      div.id = "bp";
      div.className = "statusLabel";

      $("inputFrame" + tstCurrentPage).appendChild(div);
    }

    if(pos == 1){
      bp = ($("touchscreenInput" + tstCurrentPage).value.trim().length > 0 ? $("touchscreenInput" +
        tstCurrentPage).value.trim() : "?") +
        "/" + ($("diastolic_blood_pressure").value.trim().length > 0 ? $("diastolic_blood_pressure").value.trim() : "?");
    } else if(pos == 2){
      bp = ($("systolic_blood_pressure").value.trim().length > 0 ? $("systolic_blood_pressure").value.trim() : "?") +
        "/" + ($("touchscreenInput" + tstCurrentPage).value.trim().length > 0 ? $("touchscreenInput" +
        tstCurrentPage).value.trim() : "?");
    }
    
    $("bp").innerHTML = "Blood Pressure: <i style='font-size: 1.2em; float: right;'>" + bp + "</i>";

    timedEvent = setTimeout('calculateBP(' + pos + ')', 500);
  }

</script>
<style>
  .statusLabel {
    position: absolute;
    border: 1px solid #ccc;
    background-color: #efe;
    font-size: 2em;
    padding: 15px;
    width: 920px;
    top: 120px;
    margin-left: 50%;
    left: -470px;
    border-radius: 20px;
  }
</style>
<style>
  #num {display: none;}
</style>
<form id='observations_patient_history' action="/encounters/create" method='post'>
  <% default={
    :allowFreeText => 'true',
  } %>

  <%= hidden_field_tag "next_url", "/encounters/new/#{ (params[:ret] ? params[:ret] : "observations") }/?patient_id=#{@patient.id}" %>

  <%= hidden_field_tag "encounter[encounter_type_name]", "OBSERVATIONS" %>
  <%= hidden_field_tag "encounter[patient_id]", @patient.id %>
  <%= hidden_field_tag "encounter[encounter_datetime]", (session[:datetime] ? session[:datetime].to_time : 
      DateTime.now()).strftime("%Y-%m-%d %H:%M") %>
  <%= hidden_field_tag "encounter[provider_id]", session[:user_id] %>

  <% options = default.merge({
      :id => "gravida_value",
      :helptext => "Gravida",
      :field_type => "number",
      :absoluteMin => "1",
      :max => "15",
      :flag => '{"message":"Patient at risk of PPH.<br/> Ensure family planing is discussed.","condition":"^([5-9]|[1][0-9])"}',
      :tt_pageStyleClass => "NumbersOnly" #,
      # :tt_onUnload => "$('parity_value').setAttribute('absoluteMax', $('gravida_value').value)"
    }) %>

  <%= hidden_field_tag("observations[][concept_name]",  "GRAVIDA", {:id => 'gravida_concept_name'}) %>
  <%= text_field_tag("observations[][value_numeric]",   nil, options) %>
  <%= hidden_field_tag("observations[][patient_id]",    @patient.id) %>
  <%= hidden_field_tag("observations[][obs_datetime]",  (session[:datetime] ? session[:datetime].to_time : DateTime.now()).strftime("%Y-%m-%d %H:%M")) %>

  <%= touch_select_tag "MULTIPLE GESTATION", @patient, options_for_select([["", ""], ["No", "No"], ["Yes", "Yes"]]),
    {:id => "multiple_pregnancy",
    :helptext => "Ever Had Multiple Pregnancy?",
    :condition => "__$('gravida_value').value > #{(params[:ret] == "postnatal" ? 0 : 1)}"
  } %>

  <% options = default.merge({
      :id => "parity_value",
      :helptext => "Number Of Deliveries",
      :field_type => "number",
      :absoluteMin => "0",
      :condition => "((__$('multiple_pregnancy').value == 'No' && (__$('gravida_value').value) > #{(params[:ret] ? 0 : 1)}) || " + 
        "(__$('multiple_pregnancy').value == 'Yes' && __$('gravida_value').value > #{(params[:ret] == "postnatal" ? 0 : 1)}))",
      :max => "15",
      :tt_onLoad => "if(__$('multiple_pregnancy').value.toLowerCase()=='no'){__$('touchscreenInput' + " + 
        "tstCurrentPage).setAttribute('absoluteMax', (__$('gravida_value').value - #{(params[:ret] == "postnatal" ? 0 : 1)}))}",
      :tt_pageStyleClass => "NumbersOnly",
      :tt_onUnLoad => "if(__$('multiple_pregnancy').value.toLowerCase()=='no'){
    __$('no_of_abortions').setAttribute('validationRule', '[' + (parseInt(__$('gravida_value').value) - 
    parseInt(__$('parity_value').value) - #{(params[:ret] == "postnatal" ? 0 : 1)}) + ']');
    __$('no_of_abortions').setAttribute('validationMessage', 'Expected value is ' + (parseInt(__$('gravida_value').value) - 
    parseInt(__$('parity_value').value) - #{(params[:ret] == "postnatal" ? 0 : 1)}));
    }"
    }) %>

  <%= hidden_field_tag("observations[][concept_name]",  "PARITY", {:id => 'parity_concept_name'}) %>
  <%= text_field_tag("observations[][value_numeric]",   nil, options) %>
  <%= hidden_field_tag("observations[][patient_id]",    @patient.id) %>
  <%= hidden_field_tag("observations[][obs_datetime]",  (session[:datetime] ? session[:datetime].to_time : DateTime.now()).strftime("%Y-%m-%d %H:%M")) %>

  <% options = default.merge({
      :id => "no_of_abortions",
      :helptext => "Number of abortions",
      :field_type => "number",
      :absoluteMin => "0",
      :max => "5",
      :tt_pageStyleClass => "NumbersOnly",
      :condition => "((__$('multiple_pregnancy').value == 'No' && (__$('gravida_value').value) > #{(params[:ret] == "postnatal" ? 0 : 1)}) || " + 
        "(__$('multiple_pregnancy').value == 'Yes' && __$('gravida_value').value > #{(params[:ret] == "postnatal" ? 0 : 1)}))"
    }) %>

  <%= hidden_field_tag("observations[][concept_name]",  "Number of Abortions", {:id => 'no_of_abortions_concept_name'}) %>
  <%= text_field_tag("observations[][value_numeric]",   nil, options) %>
  <%= hidden_field_tag("observations[][patient_id]",    @patient.id) %>
  <%= hidden_field_tag("observations[][obs_datetime]",  (session[:datetime] ? session[:datetime].to_time : DateTime.now()).strftime("%Y-%m-%d %H:%M")) %>

  <% (1..20).each{|e| %>

    <%
    indice = ""
    case e
    when 1
      indice = "<sup>st</sup>"
    when 2
      indice = "<sup>nd</sup>"
    when 3
      indice = "<sup>rd</sup>"
    else
      indice = "<sup>th</sup>"
    end

    @delivery_modes = ["", "Spontaneous vaginal delivery", "Caesarean Section", 
      "Vacuum extraction delivery", "Breech delivery"]
  %>

    <% options = default.merge({
        :id => "delivery_mode#{e}",
        :helptext => "Delivery Mode #{e}#{indice} Pregnancy",
        :field_type => "text",
        :condition => "parseInt($('parity_value').value.trim()) >= #{e};"
      }) %>

    <%= hidden_field_tag("observations[][concept_name]",  "DELIVERY MODE", {:id => 'delivery_mode#{e}_concept_name'}) %>
    <%= select_tag("observations[][value_coded_or_text]", options_for_select(@delivery_modes),options) %>
    <%= hidden_field_tag("observations[][patient_id]",    @patient.id) %>
    <%= hidden_field_tag("observations[][obs_datetime]",  (session[:datetime] ? session[:datetime].to_time : DateTime.now()).strftime("%Y-%m-%d %H:%M")) %>

  <% } %>

  <% options = default.merge({
      :id => "tt_status_value",
      :helptext => "TT status",
      :field_type => "number",
      :absoluteMin => "0",
      :max => "5",
      :flag => '{"condition":"^1$|^0$","message":"TT is inadequate"}',
      :tt_pageStyleClass => "NumbersOnly"
    }) %>

  <%= hidden_field_tag("observations[][concept_name]",  "TT STATUS", {:id => 'tt_status_concept_name'}) %>
  <%= text_field_tag("observations[][value_numeric]",   nil, options) %>
  <%= hidden_field_tag("observations[][patient_id]",    @patient.id) %>
  <%= hidden_field_tag("observations[][obs_datetime]",  (session[:datetime] ? session[:datetime].to_time : DateTime.now()).strftime("%Y-%m-%d %H:%M")) %>

  <% if params[:ret] && params[:ret] == "antenatal" %>
    <% options = default.merge({
        :id => "last_menstrual_period_date",
        :helptext => "Last Menstrual Period Date",
        :field_type => "date",
        :tt_onLoad => "timedEvent = setTimeout('calculateEDOD()', 100);",
        :tt_onUnLoad => "clearTimeout(timedEvent);"
      }) %>

    <%= hidden_field_tag("observations[][concept_name]",  "LAST MENSTRUAL PERIOD", {:id => 'last_menstrual_period_date_concept_name'}) %>
    <%= text_field_tag("observations[][value_datetime]",   nil, options) %>
    <%= hidden_field_tag("observations[][patient_id]",    @patient.id) %>
    <%= hidden_field_tag("observations[][obs_datetime]",  (session[:datetime] ? session[:datetime].to_time : DateTime.now()).strftime("%Y-%m-%d %H:%M")) %>
  <% end %>
</form>
